00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 13/04/2015 2:59:30 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Lab 2, Part A - Question 2
00000000                             3  * Written by :  Sam Dindyal
00000000                             4  * Date       :  April 2015
00000000                             5  * Description:  An M68000 program which reads two numbers 
00000000                             6  *               from the keyboard and prints their 
00000000                             7  *               difference on the screen.
00000000                             8  *-----------------------------------------------------------
00001000                             9      ORG    $1000
00001000                            10  START:                  
00001000                            11  
00001000  4EB9 0000106A             12      jsr     backup_registers
00001006  4EB9 00001022             13      jsr     process_input
0000100C  4EB9 00001048             14      jsr     subtract_numbers
00001012  4EB9 00001056             15      jsr     print_solution
00001018  4EB9 00001090             16      jsr     restore_registers
0000101E                            17  
0000101E  FFFF FFFF                 18      SIMHALT
00001022                            19      
00001022                            20  * Retrieve two numbers from the user through the keyboard and store them on the stack. 
00001022                            21  process_input   ; Load the effective address of the first dialog message to a0
00001022  43F9 00002000             22                  lea     dialog_message1,a1
00001028                            23                  
00001028                            24                  ; Print the null terminated ASCII string without a carriage return or line feed
00001028  700E                      25                  move.l  #14,d0
0000102A  4E4F                      26                  trap    #15
0000102C                            27                  
0000102C                            28                  ; Take in a number from the keyboard and store it into d1
0000102C  7004                      29                  move.l  #4,d0
0000102E  4E4F                      30                  trap    #15
00001030                            31                  
00001030                            32                  ; Place the retreived value and place it on the stack
00001030  2F01                      33                  move.l  d1,-(sp)
00001032                            34  
00001032                            35                  ; Load the effective address of the second dialog message to a1
00001032  43F9 00002021             36                  lea     dialog_message2,a1
00001038                            37                  
00001038                            38                  ; Print the null terminated ASCII string without a carriage return or line feed
00001038  700E                      39                  move.l  #14,d0
0000103A  4E4F                      40                  trap    #15
0000103C                            41                  
0000103C                            42                  ; Take in a number from the keyboard and store it into d1
0000103C  7004                      43                  move.l  #4,d0
0000103E  4E4F                      44                  trap    #15
00001040                            45                  
00001040                            46                  ; Place the retreived value and place it on the stack
00001040  2F01                      47                  move.l  d1,-(sp)
00001042                            48                  
00001042                            49                  ; Put the program counter back for resumption
00001042  2F2F 0008                 50                  move.l  8(sp),-(sp)
00001046                            51                  
00001046                            52                  ; Return to sender
00001046  4E75                      53                  rts
00001048                            54  
00001048                            55  * Subtract two numbers retrieved from the stack and place the solution onto the stack.
00001048                            56  subtract_numbers    ; Retrieve the first number from the stack and put it into d0
00001048  202F 0008                 57                      move.l  8(sp),d0
0000104C                            58                      
0000104C                            59                      ; Subtract the second number from the first from the stack to d0
0000104C  90AF 0004                 60                      sub.l   4(sp),d0
00001050                            61          
00001050                            62                      ; Move the solution onto the stack without disrupting the stack pointer                    
00001050  2F00                      63                      move.l  d0,-(sp)
00001052                            64  
00001052                            65  
00001052                            66                      ; Put the stack pointer back
00001052  584F                      67                      addq.w  #4,sp
00001054                            68                      
00001054                            69                      ; Return to sender
00001054  4E75                      70                      rts
00001056                            71  
00001056                            72  * Retrieve the solution from the "subtract_numbers" subroutine from the stack and print it on the screen                    
00001056                            73  print_solution      ; Load the effective address of the solution message to a1
00001056  43F9 00002043             74                      lea     solution_message,a1
0000105C                            75                      
0000105C                            76                      ; Print the null terminated ASCII string in a1 without a carriage return or line feed
0000105C  700E                      77                      move.l  #14,d0
0000105E  4E4F                      78                      trap    #15
00001060                            79                      
00001060                            80                      ; Fetch the solution from the "subtract_numbers" subroutine from the stack and place it in d1
00001060  222F FFFC                 81                      move.l  -4(sp),d1
00001064                            82                      
00001064                            83                      ; Print the signed integer in d1 on the screen
00001064  7003                      84                      move.l  #3,d0
00001066  4E4F                      85                      trap    #15
00001068                            86                      
00001068                            87                      ; Return to sender
00001068  4E75                      88                      rts
0000106A                            89  
0000106A                            90  *Backup all registers to the stack using auto decrement
0000106A                            91  backup_registers    ; Backup address registers to stack with auto decrement
0000106A  2F08                      92                      move.l  a0,-(sp)
0000106C  2F09                      93                      move.l  a1,-(sp)
0000106E  2F0A                      94                      move.l  a2,-(sp)
00001070  2F0B                      95                      move.l  a3,-(sp)
00001072  2F0C                      96                      move.l  a4,-(sp)
00001074  2F0D                      97                      move.l  a5,-(sp)
00001076  2F0E                      98                      move.l  a6,-(sp)
00001078  2F0F                      99                      move.l  a7,-(sp)
0000107A                           100                      
0000107A                           101                      ; Backup data registers to stack with auto decrement
0000107A  2F00                     102                      move.l  d0,-(sp)
0000107C  2F01                     103                      move.l  d1,-(sp)
0000107E  2F02                     104                      move.l  d2,-(sp)
00001080  2F03                     105                      move.l  d3,-(sp)
00001082  2F04                     106                      move.l  d4,-(sp)
00001084  2F05                     107                      move.l  d5,-(sp)
00001086  2F06                     108                      move.l  d6,-(sp)
00001088  2F07                     109                      move.l  d7,-(sp)
0000108A                           110                      
0000108A                           111                      ; Restore the program counter for resumption
0000108A  2F2F 0040                112                      move.l  64(sp),-(sp)
0000108E                           113                      
0000108E                           114                      ; Return to sender
0000108E  4E75                     115                      rts
00001090                           116  
00001090                           117  * Restore all content to registers using auto increment
00001090  588F                     118  restore_registers   add.l   #4,sp
00001092                           119  
00001092                           120                     ; Restore content from stack to data registers using auto increment
00001092  2E1F                     121                      move.l  (sp)+,d7
00001094  2C1F                     122                      move.l  (sp)+,d6
00001096  2A1F                     123                      move.l  (sp)+,d5
00001098  281F                     124                      move.l  (sp)+,d4
0000109A  261F                     125                      move.l  (sp)+,d3
0000109C  241F                     126                      move.l  (sp)+,d2
0000109E  221F                     127                      move.l  (sp)+,d1
000010A0  201F                     128                      move.l  (sp)+,d0
000010A2                           129                      
000010A2                           130                      ; Restore content from stack to address registers using auto increment
000010A2  2E5F                     131                      move.l  (sp)+,a7
000010A4  2C5F                     132                      move.l  (sp)+,a6
000010A6  2A5F                     133                      move.l  (sp)+,a5
000010A8  285F                     134                      move.l  (sp)+,a4
000010AA  265F                     135                      move.l  (sp)+,a3
000010AC  245F                     136                      move.l  (sp)+,a2
000010AE  225F                     137                      move.l  (sp)+,a1
000010B0  205F                     138                      move.l  (sp)+,a0
000010B2                           139                      
000010B2                           140                      ; Put the stack pointer back for the program counter to resume
000010B2  2EAF FFBC                141                      move.l  -68(sp),(sp)                    
000010B6                           142                      ; Return to sender
000010B6  4E75                     143                      rts
000010B8                           144                                    
000010B8                           145  * Variables and constants
00002000                           146      ORG    $2000
00002000                           147      
00002000= 50 6C 65 61 73 65 ...    148  dialog_message1     dc.b    'Please enter your first number: ',0
00002021= 50 6C 65 61 73 65 ...    149  dialog_message2     dc.b    'Please enter your second number: ',0
00002043= 54 68 65 20 73 6F ...    150  solution_message    dc.b    'The solution is: ',0
00002055                           151  
00002055                           152      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BACKUP_REGISTERS    106A
DIALOG_MESSAGE1     2000
DIALOG_MESSAGE2     2021
PRINT_SOLUTION      1056
PROCESS_INPUT       1022
RESTORE_REGISTERS   1090
SOLUTION_MESSAGE    2043
START               1000
SUBTRACT_NUMBERS    1048
