00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 13/04/2015 2:06:32 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Lab 2, Part A - Question 1
00000000                             3  * Written by :  Sam Dindyal
00000000                             4  * Date       :  April 2015
00000000                             5  * Description:  An M68000 program which prints the sum of 2 
00000000                             6  *               predefined numbers.
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                 
00001000  4EB9 0000103A             10      jsr backup_registers
00001006  4EB9 0000101C             11      jsr add_numbers
0000100C  4EB9 00001030             12      jsr print_solution
00001012  4EB9 00001060             13      jsr restore_registers
00001018                            14  
00001018  FFFF FFFF                 15      SIMHALT 
0000101C                            16  
0000101C                            17  * Add num1 and num2 and place the solution on the stack
0000101C                            18  add_numbers     ; Load num1 into d0
0000101C  3039 00002000             19                  move.w  num1,d0
00001022                            20                  
00001022                            21                  ; Extend d0 to long size
00001022  48C0                      22                  ext.l   d0
00001024                            23                  
00001024                            24                  ; Add num1 and num2 while storing it in d0
00001024  D079 00002002             25                  add.w   num2,d0
0000102A                            26                  
0000102A                            27                  ; Store the solution onto the stack and auto decrement
0000102A  2F00                      28                  move.l  d0,-(sp)
0000102C                            29                  
0000102C                            30                  ; Put the stack pointer back for rts
0000102C  588F                      31                  add.l   #4,sp
0000102E                            32                  
0000102E                            33                  ; Return to sender
0000102E  4E75                      34                  rts
00001030                            35  
00001030                            36  * Print the solution from the "add_numbers" subroutine
00001030                            37  print_solution  ; Fetch the solution from the "add_numbers" subroutine from the stack
00001030  222F FFFC                 38                  move.l  -4(sp),d1
00001034                            39                  
00001034                            40                  ; Prepare for the trap sequence for printing
00001034  7003                      41                  move.l  #3,d0
00001036                            42                  
00001036                            43                  ; Print the solution
00001036  4E4F                      44                  trap    #15
00001038                            45                  
00001038                            46                  ; Return to sender
00001038  4E75                      47                  rts
0000103A                            48  
0000103A                            49  *Backup all registers to the stack using auto decrement
0000103A                            50  backup_registers    ; Backup address registers to stack with auto decrement
0000103A  2F08                      51                      move.l  a0,-(sp)
0000103C  2F09                      52                      move.l  a1,-(sp)
0000103E  2F0A                      53                      move.l  a2,-(sp)
00001040  2F0B                      54                      move.l  a3,-(sp)
00001042  2F0C                      55                      move.l  a4,-(sp)
00001044  2F0D                      56                      move.l  a5,-(sp)
00001046  2F0E                      57                      move.l  a6,-(sp)
00001048  2F0F                      58                      move.l  a7,-(sp)
0000104A                            59                      
0000104A                            60                      ; Backup data registers to stack with auto decrement
0000104A  2F00                      61                      move.l  d0,-(sp)
0000104C  2F01                      62                      move.l  d1,-(sp)
0000104E  2F02                      63                      move.l  d2,-(sp)
00001050  2F03                      64                      move.l  d3,-(sp)
00001052  2F04                      65                      move.l  d4,-(sp)
00001054  2F05                      66                      move.l  d5,-(sp)
00001056  2F06                      67                      move.l  d6,-(sp)
00001058  2F07                      68                      move.l  d7,-(sp)
0000105A                            69                      
0000105A                            70                      ; Restore the program counter for resumption
0000105A  2F2F 0040                 71                      move.l  64(sp),-(sp)
0000105E                            72                      
0000105E                            73                      ; Return to sender
0000105E  4E75                      74                      rts
00001060                            75  
00001060                            76  * Restore all content to registers using auto increment
00001060  588F                      77  restore_registers   add.l   #4,sp
00001062                            78  
00001062                            79                     ; Restore content from stack to data registers using auto increment
00001062  2E1F                      80                      move.l  (sp)+,d7
00001064  2C1F                      81                      move.l  (sp)+,d6
00001066  2A1F                      82                      move.l  (sp)+,d5
00001068  281F                      83                      move.l  (sp)+,d4
0000106A  261F                      84                      move.l  (sp)+,d3
0000106C  241F                      85                      move.l  (sp)+,d2
0000106E  221F                      86                      move.l  (sp)+,d1
00001070  201F                      87                      move.l  (sp)+,d0
00001072                            88                      
00001072                            89                      ; Restore content from stack to address registers using auto increment
00001072  2E5F                      90                      move.l  (sp)+,a7
00001074  2C5F                      91                      move.l  (sp)+,a6
00001076  2A5F                      92                      move.l  (sp)+,a5
00001078  285F                      93                      move.l  (sp)+,a4
0000107A  265F                      94                      move.l  (sp)+,a3
0000107C  245F                      95                      move.l  (sp)+,a2
0000107E  225F                      96                      move.l  (sp)+,a1
00001080  205F                      97                      move.l  (sp)+,a0
00001082                            98                      
00001082                            99                      ; Put the stack pointer back for the program counter to resume
00001082  2EAF FFBC                100                      move.l  -68(sp),(sp)                    
00001086                           101                      ; Return to sender
00001086  4E75                     102                      rts
00001088                           103                      
00001088                           104  * Variables and constants
00002000                           105      ORG $2000
00002000                           106      
00002000= 0002                     107  num1    dc.w    2
00002002= 0003                     108  num2    dc.w    3
00002004                           109  
00002004                           110      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_NUMBERS         101C
BACKUP_REGISTERS    103A
NUM1                2000
NUM2                2002
PRINT_SOLUTION      1030
RESTORE_REGISTERS   1060
START               1000
