00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
<<<<<<< HEAD
Created On: 17/03/2015 5:37:31 PM
=======
Created On: 2015-04-14 7:50:04 PM
>>>>>>> 9fa68c5705b35a5878ff79b0f2a27103e8504905

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
<<<<<<< HEAD
00001000                            10  * Put program code here
00001000                            11  
00001000  2F3C 00002000             12      move.l  #file,-(sp)
00001006  6100 001A                 13      bsr open_file
0000100A  6100 002A                 14      bsr read_file
0000100E  6100 001E                 15      bsr close_file
00001012                            16      
00001012  303C 0004                 17      move.w  #4,d0
00001016  4E4F                      18      trap    #15
00001018  2F01                      19      move.l  d1,-(sp)
0000101A                            20  
0000101A  6100 00D4                 21      bsr binary_search
0000101E  FFFF FFFF                 22      SIMHALT             ; halt simulator
00001022                            23  
00001022  226F 0004                 24  open_file   move.l  4(sp),a1
00001026  303C 0033                 25              move.w  #51,d0
0000102A  4E4F                      26              trap    #15
0000102C  4E75                      27              rts
0000102E                            28              
0000102E  303C 0032                 29  close_file  move.w  #50,d0
00001032  4E4F                      30              trap    #15
00001034  4E75                      31              rts
00001036                            32  
00001036  23F9 0000201C 00002020    33  read_file   move.l  array_size,counter
00001040  43F9 00002008             34              lea     array,a1
00001046                            35              
00001046  4AB9 00002020             36  loop:       tst.l   counter
0000104C  6F00 0016                 37              ble     done_loop
00001050                            38  
00001050                            39  
00001050  343C 0004                 40              move.w  #4,d2
00001054  303C 0035                 41              move.w  #53,d0
00001058  4E4F                      42              trap    #15
0000105A  5889                      43              addq.l  #4,a1
0000105C                            44              
0000105C  53B9 00002020             45              sub.l   #1,counter
00001062  60E2                      46              bra     loop
00001064                            47  
00001064  4E75                      48  done_loop:  rts
00001066                            49  
00001066  43F9 00002034             50  found       lea      found_message,a1
0000106C  303C 000D                 51              move.w  #13,d0
00001070  4E4F                      52              trap    #15
00001072  60F0                      53              bra     done_loop
00001074                            54  
00001074  43F9 00002040             55  not_found   lea     not_found_message,a1
0000107A  303C 000D                 56              move.w  #13,d0
0000107E  4E4F                      57              trap    #15
00001080  60E2                      58              bra     done_loop
00001082                            59              
00001082  2439 00002024             60  set_middle  move.l  upper_bound,d2
00001088  D4B9 00002028             61              add.l   lower_bound,d2            
0000108E  85FC 0002                 62              divs.w  #2,d2
00001092  4842                      63              swap    d2
00001094  4242                      64              clr.w   d2
00001096  4842                      65              swap    d2
00001098  23C2 0000202C             66              move.l  d2,middle
0000109E  4E75                      67              rts
000010A0                            68  
000010A0  23F9 0000201C 00002024    69  set_bounds  move.l  array_size,upper_bound
000010AA  23FC 00000000 00002028    70              move.l  #0,lower_bound
000010B4  4E75                      71              rts
000010B6                            72  
000010B6  23F9 0000202C 00002024    73  go_lower    move.l  middle,upper_bound
000010C0  53B9 00002024             74              subq.l  #1,upper_bound
000010C6  6000 0030                 75              bra     search_loop
000010CA                            76  
000010CA  23F9 0000202C 00002028    77  go_higher   move.l  middle,lower_bound
000010D4  52B9 00002028             78              addq.l  #1,lower_bound
000010DA  6000 001C                 79              bra     search_loop
000010DE                            80              
000010DE  2439 0000202C             81  set_offset  move.l  middle,d2
000010E4  C5FC 0004                 82              muls.w  #4,d2
000010E8  23C2 00002030             83              move.l  d2,offset
000010EE  4E75                      84              rts
000010F0                            85  
000010F0                            86  
000010F0  202F 0004                 87  binary_search       move.l  4(sp),d0
000010F4  61AA                      88                      bsr     set_bounds
000010F6  618A                      89                      bsr     set_middle
000010F8                            90                      
000010F8  2239 00002028             91  search_loop:        move.l  lower_bound,d1
000010FE  B2B9 00002024             92                      cmp.l   upper_bound,d1  
00001104  6E00 FF6E                 93                      bgt     not_found
00001108                            94  
00001108  41F9 00002008             95                      lea     array,a0
0000110E  6100 FF72                 96                      bsr     set_middle
00001112  61CA                      97                      bsr     set_offset
00001114  D1F9 00002030             98                      add.l   offset,a0
0000111A                            99                      
0000111A  B090                     100                      cmp.l   (a0),d0
0000111C  6700 FF48                101                      beq     found
00001120                           102  
00001120  B090                     103                      cmp.l   (a0),d0
00001122  6D92                     104                      blt     go_lower
00001124                           105  
00001124  B090                     106                      cmp.l   (a0),d0
00001126  6EA2                     107                      bgt     go_higher
00001128                           108  
00001128  60CE                     109                      bra     search_loop
0000112A                           110  
0000112A                           111  
0000112A  4E75                     112  done_search:        rts                    
0000112C                           113  
0000112C                           114  
0000112C                           115  * Put variables and constants here
00002000                           116       ORG $2000
00002000= 66696C65 00000000        117  file        dc.l    'file',0
00002008                           118  array       ds.l    5
0000201C= 00000005                 119  array_size  dc.l    5
00002020= 00000000                 120  counter     dc.l    0
00002024                           121  
00002024= 00000000                 122  upper_bound     dc.l    0
00002028= 00000000                 123  lower_bound     dc.l    0
0000202C= 00000000                 124  middle          dc.l    0
00002030= 00000000                 125  offset          dc.l    0
00002034                           126  
00002034= 466F756E 64210000 ...    127  found_message       dc.l    'Found!',0
00002040= 4E6F7420 666F756E ...    128  not_found_message   dc.l    'Not found!',0
00002050                           129  
00002050                           130      END    START        ; last line of source
=======
00001000  4EB9 000010D0             10      jsr     backup_registers
00001006                            11      
00001006  4EB9 000010A4             12      jsr     read_array_from_file
0000100C                            13      
0000100C  4EB9 0000108E             14      jsr     process_input
00001012  4EB9 00001076             15      jsr     prepare_for_search
00001018  4EB9 00001028             16      jsr     search
0000101E                            17      
0000101E  4EB9 000010F6             18      jsr     restore_registers
00001024                            19  
00001024  FFFF FFFF                 20      SIMHALT             ; halt simulator
00001028                            21  
00001028                            22  search
00001028  4EB9 0000106C             23              jsr     update_middle
0000102E                            24              
0000102E  B280                      25              cmp.l   d0,d1
00001030  6D00 0022                 26              blt     not_found_finish
00001034                            27              
00001034  B690                      28              cmp.l   (a0),d3
00001036  6700 0010                 29              beq     found_finish
0000103A                            30              
0000103A                            31              
0000103A  B698                      32              cmp.l   (a0)+,d3
0000103C  6E00 0022                 33              bgt     shift_up
00001040                            34              
00001040  B698                      35              cmp.l   (a0)+,d3
00001042  6D00 0022                 36              blt     shift_down
00001046                            37              
00001046                            38              
00001046  60E0                      39              bra     search
00001048                            40              
00001048                            41  found_finish:
00001048  43F9 00002037             42                  lea     found_message,a1
0000104E  700D                      43                  move.l  #13,d0
00001050  4E4F                      44                  trap    #15
00001052  4E75                      45                  rts
00001054                            46             
00001054                            47  not_found_finish:   
00001054  43F9 0000203E             48                      lea     not_found_message,a1
0000105A  700D                      49                      move.l  #13,d0
0000105C  4E4F                      50                      trap    #15 
0000105E  4E75                      51                      rts
00001060                            52  
00001060                            53              
00001060                            54  
00001060                            55  shift_up
00001060  2002                      56              move.l      d2,d0
00001062  5280                      57              add.l       #1,d0
00001064  60C2                      58              bra         search
00001066                            59              
00001066                            60  shift_down
00001066  2202                      61              move.l      d2,d1
00001068  5381                      62              sub.l       #1,d1   
0000106A  60BC                      63              bra         search
0000106C                            64          
0000106C                            65  update_middle
0000106C  2401                      66                      move.l      d1,d2   ; Using d2 for middle
0000106E  85FC 0002                 67                      divs.w      #2,d2
00001072  48C2                      68                      ext.l       d2
00001074  4E75                      69                      rts
00001076                            70          
00001076                            71  prepare_for_search
00001076  4280                      72                          clr.l   d0      ; Using d0 for start
00001078  1239 00002062             73                          move.b  array_size,d1   ; Using d1 for end
0000107E  48C1                      74                          ext.l   d1
00001080  41F9 0000204E             75                          lea     array,a0        ; Using a0 for the array
00001086  2639 00002064             76                          move.l  search_key,d3      ; Using d3 for the search key
0000108C  4E75                      77                          rts
0000108E                            78  
0000108E                            79  process_input  
0000108E  43F9 00002000             80                  lea     dialog_message,a1
00001094  700E                      81                  move.l  #14,d0
00001096  4E4F                      82                  trap    #15
00001098                            83                  
00001098  7004                      84                  move.l  #4,d0
0000109A  4E4F                      85                  trap    #15
0000109C  23C1 00002064             86                  move.l  d1,search_key
000010A2                            87                  
000010A2  4E75                      88                  rts
000010A4                            89  
000010A4                            90  * Read an array from "file" and store it into "array".
000010A4                            91  read_array_from_file    ; Load the effective address of "file" into a1
000010A4  43F9 00002049             92                          lea     file,a1
000010AA                            93                          
000010AA                            94                          ; Open existing file
000010AA  7033                      95                          move.l  #51,d0
000010AC  4E4F                      96                          trap    #15
000010AE                            97                          
000010AE                            98                          ; Load the effective address of "array" into a1
000010AE  43F9 0000204E             99                          lea     array,a1    ; Use a1 as the buffer register
000010B4  1639 00002062            100                          move.b  array_size,d3   ; Use d3 as the counter for the read loop
000010BA  48C3                     101                          ext.l   d3
000010BC                           102                          
000010BC                           103  read_loop:  ; Loop until d3 is 0
000010BC  4A83                     104              tst.l   d3
000010BE  6700 000E                105              beq     done_read_loop 
000010C2                           106                    
000010C2                           107              ; Prepare registers for a read in
000010C2  7404                     108              move.l  #4,d2   ; Reading in size 4 (long size)
000010C4  7035                     109              move.l  #53,d0
000010C6                           110              
000010C6                           111              ; Decrement the counter
000010C6  5383                     112              sub.l   #1,d3
000010C8                           113              
000010C8                           114              ; Read in from file and store into array
000010C8  4E4F                     115              trap    #15
000010CA                           116              
000010CA                           117              ; Advance to the next element in the array
000010CA  5889                     118              add.l   #4,a1
000010CC                           119              
000010CC                           120              ; Branch to the read loop
000010CC  60EE                     121              bra     read_loop
000010CE                           122    
000010CE                           123  done_read_loop:     ; Return to sender
000010CE  4E75                     124                      rts
000010D0                           125                                                  
000010D0                           126  *Backup all registers to the stack using auto decrement
000010D0                           127  backup_registers    ; Backup address registers to stack with auto decrement
000010D0  2F08                     128                      move.l  a0,-(sp)
000010D2  2F09                     129                      move.l  a1,-(sp)
000010D4  2F0A                     130                      move.l  a2,-(sp)
000010D6  2F0B                     131                      move.l  a3,-(sp)
000010D8  2F0C                     132                      move.l  a4,-(sp)
000010DA  2F0D                     133                      move.l  a5,-(sp)
000010DC  2F0E                     134                      move.l  a6,-(sp)
000010DE  2F0F                     135                      move.l  a7,-(sp)
000010E0                           136                      
000010E0                           137                      ; Backup data registers to stack with auto decrement
000010E0  2F00                     138                      move.l  d0,-(sp)
000010E2  2F01                     139                      move.l  d1,-(sp)
000010E4  2F02                     140                      move.l  d2,-(sp)
000010E6  2F03                     141                      move.l  d3,-(sp)
000010E8  2F04                     142                      move.l  d4,-(sp)
000010EA  2F05                     143                      move.l  d5,-(sp)
000010EC  2F06                     144                      move.l  d6,-(sp)
000010EE  2F07                     145                      move.l  d7,-(sp)
000010F0                           146                      
000010F0                           147                      ; Restore the program counter for resumption
000010F0  2F2F 0040                148                      move.l  64(sp),-(sp)
000010F4                           149                      
000010F4                           150                      ; Return to sender
000010F4  4E75                     151                      rts
000010F6                           152  
000010F6                           153  * Restore all content to registers using auto increment
000010F6  588F                     154  restore_registers   add.l   #4,sp
000010F8                           155  
000010F8                           156                     ; Restore content from stack to data registers using auto increment
000010F8  2E1F                     157                      move.l  (sp)+,d7
000010FA  2C1F                     158                      move.l  (sp)+,d6
000010FC  2A1F                     159                      move.l  (sp)+,d5
000010FE  281F                     160                      move.l  (sp)+,d4
00001100  261F                     161                      move.l  (sp)+,d3
00001102  241F                     162                      move.l  (sp)+,d2
00001104  221F                     163                      move.l  (sp)+,d1
00001106  201F                     164                      move.l  (sp)+,d0
00001108                           165                      
00001108                           166                      ; Restore content from stack to address registers using auto increment
00001108  2E5F                     167                      move.l  (sp)+,a7
0000110A  2C5F                     168                      move.l  (sp)+,a6
0000110C  2A5F                     169                      move.l  (sp)+,a5
0000110E  285F                     170                      move.l  (sp)+,a4
00001110  265F                     171                      move.l  (sp)+,a3
00001112  245F                     172                      move.l  (sp)+,a2
00001114  225F                     173                      move.l  (sp)+,a1
00001116  205F                     174                      move.l  (sp)+,a0
00001118                           175                      
00001118                           176                      ; Put the stack pointer back for the program counter to resume
00001118  2EAF FFBC                177                      move.l  -68(sp),(sp) 
0000111C                           178  
0000111C                           179                      ; Return to sender
0000111C  4E75                     180                      rts
0000111E                           181  
0000111E                           182  
0000111E                           183  * Put variables and constants here
00002000                           184      ORG    $2000
00002000= 50 6C 65 61 73 65 ...    185  dialog_message      dc.b    'Please enter the number you would like to search for: ',0
00002037= 46 6F 75 6E 64 21 00     186  found_message       dc.b    'Found!',0
0000203E= 4E 6F 74 20 66 6F ...    187  not_found_message   dc.b    'Not found!',0
00002049                           188  
00002049= 66 69 6C 65 00           189  file                dc.b    'file',0
0000204E                           190  
0000204E                           191  array       ds.l    5
00002062= 05                       192  array_size  dc.b    5
00002064                           193  search_key  ds.l    1
00002068                           194      END    START        ; last line of source
>>>>>>> 9fa68c5705b35a5878ff79b0f2a27103e8504905

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
<<<<<<< HEAD
ARRAY               2008
ARRAY_SIZE          201C
BINARY_SEARCH       10F0
CLOSE_FILE          102E
COUNTER             2020
DONE_LOOP           1064
DONE_SEARCH         112A
FILE                2000
FOUND               1066
FOUND_MESSAGE       2034
GO_HIGHER           10CA
GO_LOWER            10B6
LOOP                1046
LOWER_BOUND         2028
MIDDLE              202C
NOT_FOUND           1074
NOT_FOUND_MESSAGE   2040
OFFSET              2030
OPEN_FILE           1022
READ_FILE           1036
SEARCH_LOOP         10F8
SET_BOUNDS          10A0
SET_MIDDLE          1082
SET_OFFSET          10DE
START               1000
UPPER_BOUND         2024
=======
ARRAY               204E
ARRAY_SIZE          2062
BACKUP_REGISTERS    10D0
DIALOG_MESSAGE      2000
DONE_READ_LOOP      10CE
FILE                2049
FOUND_FINISH        1048
FOUND_MESSAGE       2037
NOT_FOUND_FINISH    1054
NOT_FOUND_MESSAGE   203E
PREPARE_FOR_SEARCH  1076
PROCESS_INPUT       108E
READ_ARRAY_FROM_FILE  10A4
READ_LOOP           10BC
RESTORE_REGISTERS   10F6
SEARCH              1028
SEARCH_KEY          2064
SHIFT_DOWN          1066
SHIFT_UP            1060
START               1000
UPDATE_MIDDLE       106C
>>>>>>> 9fa68c5705b35a5878ff79b0f2a27103e8504905
